// Code generated by protoc-gen-bic. DO NOT EDIT.
// versions:1.3.8

package api

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/go-playground/validator/v10"
)

var ManagerServiceValidate = validator.New()

func RegisterManagerServiceHttpHandler(g *gin.RouterGroup, srvs ManagerService) {
	tmp := &x_ManagerService{xx: srvs}
	g.GET("/bic-cd/manager/v1/services/", tmp.GetServices)
}

type ManagerService interface {
	GetServices(ctx *gin.Context, in *RequestGetService) (out *ResponseGetService, code ErrCode)
}

// generated http handle
type ManagerServiceHttpHandler interface {
	GetServices(ctx *gin.Context)
}

type x_ManagerService struct {
	xx ManagerService
}

// @Summary	获取服务列表
// @Tags		Manager-Service
// @Produce	json
// @Param		page		query		uint32	false	"参数无注释"
// @Param		page_size	query		uint32	false	"参数无注释"
// @Success	200			{object}	gen.Response{data=ResponseGetService}
// @Failure	401			{string}	string	"header need Authorization data"
// @Failure	403			{string}	string	"no api permission or no obj permission"
// @Router		/bic-cd/manager/v1/services/ [GET]
func (x *x_ManagerService) GetServices(ctx *gin.Context) {
	req := &RequestGetService{}
	if err := ctx.ShouldBindQuery(req); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"code": 400, "detail": "request error"})
		return
	}
	if err := ManagerServiceValidate.Struct(req); err != nil {
		msg := "request param validator error"
		if gin.Mode() == gin.DebugMode {
			msg = msg + " | " + err.Error()
		}
		ctx.JSON(http.StatusBadRequest, gin.H{
			"code":   400,
			"detail": msg,
		})
		return
	}
	rsp, errCode := x.xx.GetServices(ctx, req)

	ctx.JSON(http.StatusOK, gin.H{
		"code":   errCode.Code(),
		"detail": errCode.String(),
		"data":   rsp,
	})
}
